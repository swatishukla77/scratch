{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "linuxAdminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Linux Virtual Machines (SSH or Password)."
      }
    },
    "linuxAdminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Linux Virtual Machine.  Not Required.  If not set, you must provide a SSH key."
      }
    },
    "sshRSAPublicKey": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "SSH public key used for auth to all Linux machines.  Not Required.  If not set, you must provide a password key."
      }
    },
    "windowsAdminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "User name for the Windows Jumpbox Virtual Machine (Password Only Supported)."
      }
    },
    "windowsAdminPassword": {
      "type": "securestring",
      "defaultValue": "",
      "metadata": {
        "description": "Password for the Windows Jumpbox Virtual Machine."
      }
    },
    "jumpboxEndpointDNSNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Sets the Domain name label for the jumpbox.  The concatenation of the domain name label and the regionalized DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "masterEndpointDNSNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Sets the Domain name label for the master IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "agentEndpointDNSNamePrefix": {
      "type": "string",
      "metadata": {
        "description": "Sets the Domain name label for the agent pool IP Address.  The concatenation of the domain name label and the regional DNS zone make up the fully qualified domain name associated with the public IP address."
      }
    },
    "agentCount": {
      "type": "int",
      "defaultValue": 1,
      "metadata": {
        "description": "The number of Mesos agents for the cluster.  This value can be from 1 to 100"
      },
      "allowedValues": [
        1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,
        21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,
        41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,
        61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
        81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100
      ]
    },
    "masterCount": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [
        1,
        3,
        5
      ],
      "metadata": {
        "description": "The number of Mesos masters for the cluster."
      }
    },
    "agentVMSize": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "allowedValues": [
        "Standard_A1",
        "Standard_A2",
        "Standard_A3",
        "Standard_A4"
      ],
      "metadata": {
        "description": "The size of the Virtual Machine. Allowable machine values are 1 core (A1), 2 core (A2), 4 core (A3), 8 core (A4)."
      }
    },
    "linuxPublisher": {
      "type": "string",
      "defaultValue": "Canonical",
      "metadata": {
        "description": "This is the publisher of the image used by the linux cluster"
      }
    },
    "linuxOffer": {
      "type": "string",
      "defaultValue": "UbuntuServer",
      "metadata": {
        "description": "This is the offer of the image used by the linux cluster"
      }
    },
    "linuxSku": {
      "type": "string",
      "defaultValue": "14.04.2-LTS",
      "metadata": {
        "description": "This is the linux sku used by the linux cluster"
      }
    },
    "linuxVersion": {
      "type": "string",
      "defaultValue": "1.0.0",
      "metadata": {
        "description": "This is the linux version used by the linux cluster"
      }
    },
    "windowsJumpboxPublisher": {
      "type": "string",
      "defaultValue": "MicrosoftWindowsServer",
      "metadata": {
        "description": "This is the windows publisher used by the windows jumpbox"
      }
    },
    "windowsJumpboxOffer": {
      "type": "string",
      "defaultValue": "WindowsServer",
      "metadata": {
        "description": "This is the windows offer used by the windows jumpbox"
      }
    },
    "windowsJumpboxSku": {
      "type": "string",
      "defaultValue": "2012-R2-Datacenter",
      "metadata": {
        "description": "This is the windows sku used by the windows jumpbox"
      }
    },
    "isValidation": {
      "type": "int",
      "defaultValue": 0,
      "allowedValues": [0,1],
      "metadata": {
        "description": "This is testing in the validation region"
      }
    },
    "disablePasswordAuthentication": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "This setting controls whether password auth is disabled for Linux VMs provisioned by this template. Default is true which disables password and makes SSH key required."
      }
    },
    "setLinuxConfigurationForVMCreate": {
      "type": "int",
      "defaultValue": 1,
      "allowedValues": [0,1],
      "metadata": {
        "description": "This setting controls whether Linux configuration with SSH Key is passed in VM PUT Payload.  Defaults to 1.  If SSH Key is blank, this must be set to 0."
      }
    },
    "nameSuffix": {
      "type": "string",
      "defaultValue": "01234567",
      "metadata": {
        "description": "A string to include in the names of resources created.  Defaults to 0.  Can not be blank."
      }
    },
    "vmsPerStorageAccount": {
      "type": "int",
      "defaultValue": 5,
      "metadata": {
        "description": "This specifies the number of VMs per storage accounts"
      }
    },
    "postInstallScriptURI": {
      "type": "string",
      "defaultValue": "disabled",
      "metadata": {
        "description": "After installation, this specifies a script to download and install.  To disabled, set value to 'disabled'."
      }
    }
  },
  "variables": {
    "adminUsername": "[parameters('linuxAdminUsername')]",
    "adminPassword": "[parameters('linuxAdminPassword')]",
    "jumpboxEndpointDNSNamePrefix": "[tolower(parameters('jumpboxEndpointDNSNamePrefix'))]",
    "masterEndpointDNSNamePrefix": "[tolower(parameters('masterEndpointDNSNamePrefix'))]",
    "agentEndpointDNSNamePrefix": "[tolower(parameters('agentEndpointDNSNamePrefix'))]",
    "agentCount": "[parameters('agentCount')]",
    "masterCount": "[parameters('masterCount')]",
    "agentVMSize": "[parameters('agentVMSize')]",
    "sshRSAPublicKey": "[parameters('sshRSAPublicKey')]",
    "linuxPublisher": "[parameters('linuxPublisher')]",
    "linuxOffer": "[parameters('linuxOffer')]",
    "linuxSku": "[parameters('linuxSku')]",
    "linuxVersion": "[parameters('linuxVersion')]",
    "windowsJumpboxPublisher": "[parameters('windowsJumpboxPublisher')]",
    "windowsJumpboxOffer": "[parameters('windowsJumpboxOffer')]",
    "windowsJumpboxSku": "[parameters('windowsJumpboxSku')]",
    "windowsAdminUsername": "[parameters('windowsAdminUsername')]",
    "windowsAdminPassword": "[parameters('windowsAdminPassword')]",
    "vmsPerStorageAccount": "[parameters('vmsPerStorageAccount')]",
    "postInstallScriptURI": "[parameters('postInstallScriptURI')]",

    "nameSuffix": "[parameters('nameSuffix')]",

    "isValidation": "[parameters('isValidation')]",
    "storageLocations": [
      "[resourceGroup().location]",
      "East US 2 (Stage)"
    ],
    "storageLocation": "[variables('storageLocations')[variables('isValidation')]]",

    "sshKeyPath": "[concat('/home/', variables('adminUsername'), '/.ssh/authorized_keys')]",
    "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
    "setLinuxConfigurationForVMCreate": "[parameters('setLinuxConfigurationForVMCreate')]",
    "linuxConfigurations": [
        {},
        {
            "disablePasswordAuthentication": "[variables('disablePasswordAuthentication')]",
            "ssh": {
                "publicKeys": [
                    {
                        "path": "[variables('sshKeyPath')]",
                        "keyData": "[variables('sshRSAPublicKey')]"
                    }
                ]
            }
        }
    ],
    "linuxConfiguration": "[variables('linuxConfigurations')[variables('setLinuxConfigurationForVMCreate')]]",

    "orchestratorName": "mesos",

    "masterPublicIPAddressName": "[concat(variables('orchestratorName'), '-master-ip-', variables('masterEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "agentPublicIPAddressName": "[concat(variables('orchestratorName'), '-agent-ip-', variables('agentEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",
    "jumpboxPublicIPAddressName": "[concat(variables('orchestratorName'), '-jumpbox-ip-', variables('jumpboxEndpointDNSNamePrefix'), '-', variables('nameSuffix'))]",

    "marathonEnabled": true,
    "chronosEnabled": true,
    "swarmEnabled": false,
    "osImagePublisher": "[variables('linuxPublisher')]",
    "osImageOffer": "[variables('linuxOffer')]",
    "osImageSKU": "[variables('linuxSku')]",
    "osImageVersion": "[variables('linuxVersion')]",

    "virtualNetworkName": "[concat(variables('orchestratorName'), '-vnet-', variables('nameSuffix'))]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName'))]",
    "subnetName": "[concat(variables('orchestratorName'), '-subnet')]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/',variables('subnetName'))]",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/18",
    "storageAccountType": "Standard_GRS",
    "storageAccountPrefixes": [
      "0","6","c","i","o","u","1","7","d","j","p","v",
      "2","8","e","k","q","w","3","9","f","l","r","x",
      "4","a","g","m","s","y","5","b","h","n","t","z"
    ],
    "storageAccountPrefixesCount": "[length(variables('storageAccountPrefixes'))]",
    "storageAccountBaseName": "[concat(variables('masterEndpointDNSNamePrefix'), variables('orchestratorName'))]",
    "masterStorageAccountName": "[concat(variables('storageAccountBaseName'), '0')]",
    "omsStorageAccount": "none",
    "omsStorageAccountKey": "none",
    "clusterInstallParameters": "[concat(variables('masterCount'), ' ',variables('masterVMNamePrefix'), ' ',variables('masterFirstAddr'), ' ',variables('swarmEnabled'),' ',variables('marathonEnabled'),' ',variables('chronosEnabled'),' ',variables('omsStorageAccount'),' ',variables('omsStorageAccountKey'),' ', variables('adminUsername'),' ',variables('postInstallScriptURI'))]",

    "jumpboxNSGName": "[concat(variables('orchestratorName'), '-jumpbox-nsg-', variables('nameSuffix'))]",
    "jumpboxNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('jumpboxNSGName'))]",
    "jumpboxAddr": 4,
    "jumpboxVMName": "[concat('jb-', variables('nameSuffix'))]",
    "jumpboxVMSize": "Standard_A1",

    "jumpboxLinuxInstallParameters": "[concat(variables('adminUsername'))]",
    "jumpboxLinuxCustomScript": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/configure-ubuntu.sh ',variables('jumpboxLinuxInstallParameters'),' >> /var/log/azure/jumpbox-bootstrap.log 2>&1 &\" &')]",

    "setBrowserFirstTabDefaultPrefix": "powershell.exe -ExecutionPolicy Unrestricted -command \"New-Item -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer' ; New-Item -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\BrowserEmulation' ; New-ItemProperty -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\BrowserEmulation' -Name IntranetCompatibilityMode -Value 0 -Type DWord; New-Item -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\Main' ; New-ItemProperty -Path HKLM:'\\SOFTWARE\\Policies\\Microsoft\\Internet Explorer\\Main' -Name 'Start Page' -Type String -Value http://\"",
    "setBrowserFirstTabDefaultSuffix": "0:5050",
    "jumpboxWindowsCustomScript": "[concat(variables('setBrowserFirstTabDefaultPrefix'),variables('masterVMNamePrefix'),variables('setBrowserFirstTabDefaultSuffix'))]",

    "masterNSGName": "[concat(variables('orchestratorName'), '-master-nsg-', variables('nameSuffix'))]",
    "masterNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('masterNSGName'))]",
    "masterVMNamePrefix": "[concat(variables('orchestratorName'), '-master-', variables('nameSuffix'), '-')]",
    "masterFirstAddr": 5,
    "masterAvailabilitySet": "[concat(variables('orchestratorName'), '-master-availabilitySet-', variables('nameSuffix'))]",
    "masterLbName": "[concat(variables('orchestratorName'), '-master-lb-', variables('nameSuffix'))]",
    "masterVMSize":"Standard_A1",
    "masterLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('masterLbName'))]",
    "masterLbIPConfigName": "[concat(variables('orchestratorName'), '-master-lbFrontEnd-', variables('nameSuffix'))]",
    "masterLbIPConfigID": "[concat(variables('masterLbID'),'/frontendIPConfigurations/', variables('masterLbIPConfigName'))]",
    "masterLbBackendPoolName": "[concat(variables('orchestratorName'), '-master-pool-', variables('nameSuffix'))]",
    "masterCustomScript": "[concat('/bin/bash -c \"/bin/bash /opt/azure/containers/configure-mesos-cluster.sh ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1\"')]",

    "agentNSGName": "agent-nsg",
    "agentNSGName": "[concat(variables('orchestratorName'), '-agent-nsg-', variables('nameSuffix'))]",
    "agentNSGID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('agentNSGName'))]",
    "agentFirstAddr": 20,
    "agentVMNamePrefix": "[concat(variables('orchestratorName'), '-agent-', variables('nameSuffix'), '-')]",
    "agentAvailabilitySet": "[concat(variables('orchestratorName'), '-agent-availabilitySet-', variables('nameSuffix'))]",
    "agentsLbName": "[concat(variables('orchestratorName'), '-agent-lb-', variables('nameSuffix'))]",
    "agentsLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('agentsLbName'))]",
    "agentsLbIPConfigName": "[concat(variables('orchestratorName'), '-agent-lbFrontEnd-', variables('nameSuffix'))]",
    "agentsLbIPConfigID": "[concat(variables('agentsLbID'),'/frontendIPConfigurations/', variables('agentsLbIPConfigName'))]",
    "agentsLbBackendPoolName": "[concat(variables('orchestratorName'), '-agent-pool-', variables('nameSuffix'))]",
    "agentStorageAccountsCount": "[add(div(variables('agentCount'), variables('vmsPerStorageAccount')), mod(add(mod(variables('agentCount'), variables('vmsPerStorageAccount')),2), add(mod(variables('agentCount'), variables('vmsPerStorageAccount')),1)))]",
    "agentsPerIPv4Octet": 200,
    "agentCustomScript": "[concat('/usr/bin/nohup /bin/bash -c \"/bin/bash /opt/azure/containers/configure-mesos-cluster.sh ',variables('clusterInstallParameters'),' >> /var/log/azure/cluster-bootstrap.log 2>&1 &\" &')]"
  },
  "resources": [
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('jumpboxPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('jumpboxEndpointDNSNamePrefix')]"
        }
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('jumpboxNSGName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "description": "Allow RDP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "3389",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('jumpboxVMName'), '-nic')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('jumpboxPublicIPAddressName'))]",
        "[variables('vnetID')]",
        "[variables('jumpboxNSGID')]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[variables('jumpboxNSGID')]"
        },
        "ipConfigurations": [
          {
            "name": "ipConfig",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(split(variables('subnetPrefix'),'0/18')[0], variables('jumpboxAddr'))]",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('jumpboxPublicIPAddressName'))]"
              },
              "subnet": {
                "id": "[variables('subnetRef')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('jumpboxVMName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('jumpboxVMName'), '-nic')]",
        "[variables('masterStorageAccountName')]"
      ],
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('jumpboxVMSize')]"
        },
        "osProfile": {
          "computername": "[variables('jumpboxVMName')]",
          "adminUsername": "[variables('windowsAdminUsername')]",
          "adminPassword": "[variables('windowsAdminPassword')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('windowsJumpboxPublisher')]",
            "offer": "[variables('windowsJumpboxOffer')]",
            "sku": "[variables('windowsJumpboxSku')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('jumpboxVMName'),'-osdisk')]",
            "vhd": {
              "uri": "[concat('http://', variables('masterStorageAccountName'), '.blob.core.windows.net/vhds/', variables('jumpboxVMName'), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('jumpboxVMName'), '-nic'))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('jumpboxVMName'),'/installcustomscript')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('jumpboxVMName'))]"
      ],
      "properties": {
        "publisher": "Microsoft.Compute",
        "type": "CustomScriptExtension",
        "typeHandlerVersion": "1.4",
        "settings": {
          "commandToExecute": "[variables('jumpboxWindowsCustomScript')]"
        }
      }
    },

    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('masterStorageAccountName')]",
      "apiVersion": "2015-06-15",
      "location": "[variables('storageLocation')]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('masterAvailabilitySet')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('masterPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('masterEndpointDNSNamePrefix')]"
        }
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "name": "[variables('masterLbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('masterLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('masterPublicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('masterLbBackendPoolName')]"
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('masterLbName'), '/', 'SSH-', variables('masterVMNamePrefix'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "masterLbLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[variables('masterLbID')]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('masterLbIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(2200)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('masterNSGName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "description": "Allow SSH",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 200,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[variables('masterLbID')]",
        "[variables('vnetID')]",
        "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]",
        "[variables('masterNSGID')]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[variables('masterNSGID')]"
        },
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(split(variables('subnetPrefix'),'0/18')[0], copyIndex(variables('masterFirstAddr')))]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('masterLbID'), '/backendAddressPools/', variables('masterLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('masterLbID'),'/inboundNatRules/SSH-',variables('masterVMNamePrefix'),copyIndex())]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/networkInterfaces/', variables('masterVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/',variables('masterAvailabilitySet'))]",
        "[variables('masterStorageAccountName')]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('masterAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('masterVMSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('masterVMNamePrefix'), copyIndex())]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]",
          "customData": "[base64('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        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\n    path: /opt/azure/containers/configure-mesos-cluster.sh\n    permissions: \"0744\"\n')]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "name": "[concat(variables('masterVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat('http://', variables('masterStorageAccountName'), '.blob.core.windows.net/vhds/', variables('masterVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('masterVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('masterVMNamePrefix'), copyIndex(), '/configuremaster')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('masterCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('masterVMNamePrefix'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.3",
        "settings": {
          "fileUris": [],
          "commandToExecute": "[variables('masterCustomScript')]"
        }
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[concat(variables('storageAccountPrefixes')[mod(copyIndex(),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(copyIndex(),variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),copyIndex(1))]",
      "apiVersion": "2015-06-15",
      "location": "[variables('storageLocation')]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('agentStorageAccountsCount')]"
      },
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('agentAvailabilitySet')]",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('agentPublicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('agentEndpointDNSNamePrefix')]"
        }
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "name": "[variables('agentsLbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('agentsLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('agentPublicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('agentsLbBackendPoolName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "LBRuleHTTP",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('agentsLbIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
              },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsLbID'),'/probes/tcpHTTPProbe')]"
              }
            }
          },
          {
            "name": "LBRuleHTTPS",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('agentsLbIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
              },
              "protocol": "tcp",
              "frontendPort": 443,
              "backendPort": 443,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsLbID'),'/probes/tcpHTTPSProbe')]"
              }
            }
          },
          {
            "name": "LBRulePort8080",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('agentsLbIPConfigID')]"
              },
              "backendAddressPool": {
                "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
              },
              "protocol": "tcp",
              "frontendPort": 8080,
              "backendPort": 8080,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "loadDistribution": "Default",
              "probe": {
                "id": "[concat(variables('agentsLbID'),'/probes/tcpPort8080Probe')]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "tcpHTTPProbe",
            "properties": {
              "protocol": "tcp",
              "port": 80,
              "intervalInSeconds": "5",
              "numberOfProbes": "2"
            }
          },
          {
            "name": "tcpHTTPSProbe",
            "properties": {
              "protocol": "tcp",
              "port": 443,
              "intervalInSeconds": "5",
              "numberOfProbes": "2"
            }
          },
          {
            "name": "tcpPort8080Probe",
            "properties": {
              "protocol": "tcp",
              "port": 8080,
              "intervalInSeconds": "5",
              "numberOfProbes": "2"
            }
          }
        ],
        "inboundNatRules": []
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('agentNSGName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "http",
            "properties": {
              "description": "Allow HTTP",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "80",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 210,
              "direction": "Inbound"
            }
          },
          {
            "name": "https",
            "properties": {
              "description": "Allow HTTPS",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "443",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 220,
              "direction": "Inbound"
            }
          },
          {
            "name": "Tcp8080",
            "properties": {
              "description": "Allow port 8080",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8080",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 230,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-05-01-preview",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('agentVMNamePrefix'), 'nic-', copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopNode",
        "count": "[variables('agentCount')]"
      },
      "dependsOn": [
        "[variables('agentsLbID')]",
        "[variables('vnetID')]",
        "[variables('agentNSGID')]"
      ],
      "properties": {
        "networkSecurityGroup": {
          "id": "[variables('agentNSGID')]"
        },
        "ipConfigurations": [
          {
            "name": "ipConfigNode",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat(split(variables('subnetPrefix'),'0.0/18')[0], div(copyIndex(),variables('agentsPerIPv4Octet')), '.', add(mod(copyIndex(),variables('agentsPerIPv4Octet')), variables('agentFirstAddr')))]",
              "subnet": {
                "id": "[variables('subnetRef')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('agentsLbID'), '/backendAddressPools/', variables('agentsLbBackendPoolName'))]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('agentVMNamePrefix'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('agentCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('storageAccountPrefixes')[mod(div(copyIndex(),variables('vmsPerStorageAccount')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(div(copyIndex(),variables('vmsPerStorageAccount')),variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),add(1,div(copyIndex(),variables('vmsPerStorageAccount'))))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('agentVMNamePrefix'), 'nic-', copyIndex())]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('agentAvailabilitySet'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('agentAvailabilitySet'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('agentVMSize')]"
        },
        "osProfile": {
          "computername": "[concat(variables('agentVMNamePrefix'), copyIndex())]",
          "adminUsername": "[variables('adminUsername')]",
          "adminPassword": "[variables('adminPassword')]",
          "customData": "[base64('#cloud-config\n\nwrite_files:\n -  encoding: gzip\n    content: !!binary |\n        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\n    path: /opt/azure/containers/configure-mesos-cluster.sh\n    permissions: \"0744\"\n')]",
          "linuxConfiguration": "[variables('linuxConfiguration')]"
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('osImageSKU')]",
            "version": "[variables('osImageVersion')]"
          },
          "osDisk": {
            "name": "[concat(variables('agentVMNamePrefix'), copyIndex(),'-osdisk')]",
            "vhd": {
              "uri": "[concat('http://',variables('storageAccountPrefixes')[mod(div(copyIndex(),variables('vmsPerStorageAccount')),variables('storageAccountPrefixesCount'))],variables('storageAccountPrefixes')[div(div(copyIndex(),variables('vmsPerStorageAccount')),variables('storageAccountPrefixesCount'))],variables('storageAccountBaseName'),add(1,div(copyIndex(),variables('vmsPerStorageAccount'))), '.blob.core.windows.net/vhds/', variables('agentVMNamePrefix'), copyIndex(), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('agentVMNamePrefix'), 'nic-', copyIndex()))]"
            }
          ]
        }
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('agentVMNamePrefix'), copyIndex(), '/configureagent')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopNode",
        "count": "[variables('agentCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Compute/virtualMachines/', variables('agentVMNamePrefix'), copyIndex())]"
      ],
      "properties": {
        "publisher": "Microsoft.OSTCExtensions",
        "type": "CustomScriptForLinux",
        "typeHandlerVersion": "1.3",
        "settings": {
          "fileUris": [],
          "commandToExecute": "[variables('agentCustomScript')]"
        }
      }
    }
  ],
  "outputs": {
    "jumpboxFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('jumpboxPublicIPAddressName'))).dnsSettings.fqdn]"
    },
    "masterFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('masterPublicIPAddressName'))).dnsSettings.fqdn]"
    },
    "agentFQDN": {
      "type": "string",
      "value": "[reference(concat('Microsoft.Network/publicIPAddresses/', variables('agentPublicIPAddressName'))).dnsSettings.fqdn]"
    }
  }
}
